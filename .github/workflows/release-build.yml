name: Release build

on:
  push:
    branches:
      - 'bump-deps'
    tags:
      - 'v0.*'
      - 'v1.*'
      - 'v2.*'
env:
  CARGO_TERM_COLOR: always
jobs:
  build_rpi:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup cross environment
        run: docker build -t rpirust -f scripts/Dockerfile.rpi scripts/
      - name: Run build
        run: docker run --rm -v $(pwd):/src -w /src rpirust ./scripts/build-pi-armv6hf.sh deb -p minidsp
      - name: Copy debian package
        run: |
          cp -v target/arm-unknown-linux-gnueabihf/debian/${{ matrix.pair.bin }}* .
      - name: Upload debian package
        uses: actions/upload-artifact@v4
        with:
          name: arm-linux-gnueabihf-rpi-deb-artifact
          path: minidsp*.deb
          if-no-files-found: error
      - name: Create binary
        run: |
          mkdir archive
          cp target/arm-unknown-linux-gnueabihf/release/minidsp archive
          cd archive/
          tar -czf ../minidsp.arm-linux-gnueabihf-rpi.tar.gz *
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: arm-linux-gnueabihf-rpi-artifact
          path: minidsp.arm-linux-gnueabihf-rpi.tar.gz
          if-no-files-found: error
  build_all:
    strategy:
      fail-fast: false
      matrix:
        pair:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            bin: minidsp
            svc_bin: minidspd
            cross: false
            archive: tar.gz
            command: cargo
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            bin: minidsp
            svc_bin: minidspd
            cross: true
            archive: tar.gz
            command: cross
          - target: x86_64-apple-darwin
            os: macOS-latest
            bin: minidsp
            svc_bin: minidspd
            cross: false
            archive: tar.gz
            command: cargo
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            bin: minidsp.exe
            svc_bin: minidspd.exe
            cross: false
            archive: zip
            command: cargo

    runs-on: ${{ matrix.pair.os }}
    env:
      CARGO_DEB_VER: 2.7.0

    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.pair.target }}

      - name: Install Cargo Cross
        if: runner.os == 'Linux'
        run: |
          curl -L -o /tmp/cross.tar.gz https://github.com/cross-rs/cross/releases/download/v0.2.5/cross-x86_64-unknown-linux-gnu.tar.gz
          cd /usr/local/bin
          tar -zxvf /tmp/cross.tar.gz

      - name: Install native packages
        if: runner.os == 'Linux' && matrix.pair.cross == false
        run: sudo apt-get install libusb-1.0-0 libusb-1.0-0-dev

      # From https://github.com/NLnetLabs/krill/blob/master/.github/workflows/pkg.yml
      # Speed up cargo-deb installation by only re-downloading and re-building its
      # dependent crates if we change the version of cargo-deb that we are using.
      - name: Cache Cargo Deb binary
        if: runner.os == 'Linux'
        id: cache-cargo-deb
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-deb
          key: ${{ matrix.pair.target }}-cargo-deb-${{ env.CARGO_DEB_VER }}

      - run: |
          ${{ matrix.pair.command }} build --bin minidsp --bin minidspd --release --target ${{ matrix.pair.target }}

      # Only install cargo-deb if not already fetched from the cache.
      - name: Install Cargo Deb
        if: runner.os == 'Linux' && steps.cache-cargo-deb.outputs.cache-hit != 'true'
        run: |
          cargo install cargo-deb --version $CARGO_DEB_VER

      - name: Create debian package
        if: runner.os == 'Linux'
        run: |
          cargo deb --target ${{ matrix.pair.target }} -p minidsp --no-build --no-strip
          cp -v target/${{ matrix.pair.target }}/debian/${{ matrix.pair.bin }}* .

      - name: Upload debian package
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.pair.target }}-deb
          path: minidsp*.deb
          if-no-files-found: error

      - name: Create binary
        if: matrix.pair.archive == 'tar.gz'
        run: |
          mkdir archive
          cp target/${{ matrix.pair.target }}/release/${{ matrix.pair.bin }} archive
          cp target/${{ matrix.pair.target }}/release/${{ matrix.pair.svc_bin }} archive
          cd archive/
          tar -czf ../minidsp.${{ matrix.pair.target }}.tar.gz *

      - name: Create binary
        if: matrix.pair.archive == 'zip'
        run: |
          mkdir archive
          cp target/${{ matrix.pair.target }}/release/${{ matrix.pair.bin }} archive
          cp target/${{ matrix.pair.target }}/release/${{ matrix.pair.svc_bin }} archive
          cd archive/
          compress-archive -Path *.exe -DestinationPath ../minidsp.${{ matrix.pair.target }}.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.pair.target }}-artifact
          path: minidsp.${{ matrix.pair.target }}.${{ matrix.pair.archive }}
          if-no-files-found: error

  release:
    runs-on: ubuntu-latest
    needs: [build_all]
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List artifacts
        run: |
          ls -R artifacts/**/*
      - name: Create release with artifacts
        run: |
          set -x
          assets=()
          for asset in ./artifacts/*/*.{tar.gz,zip,deb}; do
            assets+=("-a" "$asset")
          done
          TAG="${GITHUB_REF##*/}"
          hub release create "${assets[@]}" --draft --message "$TAG" "$TAG"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
